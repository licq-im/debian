commit 0369bd490e9941924802c61d75694dd677a48441
Author: Erik Johansson <erijo@licq.org>
Date:   Sun Oct 17 18:40:42 2010 +0000

    Merged r7909 and r7910 from trunk to don't call pthread_cancel/join after a
    thread has been joined as it is undefined and the unit test crashes on hppa.

diff --git a/licq/src/plugins/pluginthread.cpp b/licq/src/plugins/pluginthread.cpp
index e9f9eb5..0a4f249 100644
--- licq/src/plugins/pluginthread.cpp
+++ licq/src/plugins/pluginthread.cpp
@@ -25,6 +25,8 @@
 
 #include <boost/exception_ptr.hpp>
 
+const pthread_t INVALID_THREAD_ID = 0;
+
 using Licq::MutexLocker;
 using namespace LicqDaemon;
 
@@ -144,15 +146,22 @@ void PluginThread::stop()
 
 void* PluginThread::join()
 {
+  if (isThread(INVALID_THREAD_ID))
+    return NULL;
+
   void* result;
   if (::pthread_join(myThread, &result) == 0)
+  {
+    myThread = INVALID_THREAD_ID;
     return result;
+  }
   return NULL;
 }
 
 void PluginThread::cancel()
 {
-  ::pthread_cancel(myThread);
+  if (!isThread(INVALID_THREAD_ID))
+    ::pthread_cancel(myThread);
 }
 
 bool PluginThread::isThread(const pthread_t& thread) const
@@ -162,6 +171,8 @@ bool PluginThread::isThread(const pthread_t& thread) const
 
 DynamicLibrary::Ptr PluginThread::loadPlugin(const std::string& path)
 {
+  assert(!isThread(INVALID_THREAD_ID));
+
   MutexLocker locker(myData->myMutex);
   myData->myState = PluginThread::Data::STATE_LOAD_PLUGIN;
   myData->myPluginPath = path;
@@ -183,6 +194,8 @@ DynamicLibrary::Ptr PluginThread::loadPlugin(const std::string& path)
 
 bool PluginThread::initPlugin(bool (*pluginInit)(void*), void* argument)
 {
+  assert(!isThread(INVALID_THREAD_ID));
+
   MutexLocker locker(myData->myMutex);
   myData->myState = PluginThread::Data::STATE_INIT_PLUGIN;
   myData->myPluginInit = pluginInit;
@@ -203,6 +216,8 @@ bool PluginThread::initPlugin(bool (*pluginInit)(void*), void* argument)
 
 void PluginThread::startPlugin(void* (*pluginStart)(void*), void* argument)
 {
+  assert(!isThread(INVALID_THREAD_ID));
+
   MutexLocker locker(myData->myMutex);
   myData->myState = PluginThread::Data::STATE_START_PLUGIN;
   myData->myPluginStart = pluginStart;
diff --git a/licq/src/plugins/tests/pluginthreadtest.cpp b/licq/src/plugins/tests/pluginthreadtest.cpp
index e7d29c7..9dd07e2 100644
--- licq/src/plugins/tests/pluginthreadtest.cpp
+++ licq/src/plugins/tests/pluginthreadtest.cpp
@@ -82,5 +82,4 @@ TEST_F(PluginThreadFixture, startPlugin)
   thread.startPlugin(&start, &id);
   EXPECT_EQ(thread.join(), (void*)42);
   EXPECT_FALSE(::pthread_equal(id, ::pthread_self()));
-  EXPECT_TRUE(thread.isThread(id));
 }
